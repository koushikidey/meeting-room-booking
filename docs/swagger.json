{
    "swagger": "2.0",
    "info": {
        "description": "API documentation for Meeting Room Booking system",
        "title": "Meeting Room Booking API",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:9010",
    "basePath": "/",
    "paths": {
        "/booking/{id}": {
            "put": {
                "description": "Allows an authenticated employee to update their booking",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bookings"
                ],
                "summary": "Update existing booking details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Booking ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated booking details",
                        "name": "booking",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.BookingDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.BookingDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid Employee ID or JSON input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (not logged in)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden (trying to update another employee's booking)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Booking not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to update booking",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Allows an authenticated employee to delete their booking",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bookings"
                ],
                "summary": "Delete existing booking details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Booking ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Deleted booking details",
                        "name": "booking",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.BookingDTO"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid Employee ID or JSON input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (not logged in)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden (trying to update another employee's booking)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Booking not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to delete booking",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/bookings": {
            "get": {
                "description": "Retrieves all bookings along with all details",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bookings"
                ],
                "summary": "Get list of all bookings",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.BookingDTO"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new booking if the time and capacity constraints are satisfied. Sends confirmation email and adds Google Calendar event if linked.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bookings"
                ],
                "summary": "Create a new booking",
                "parameters": [
                    {
                        "description": "Booking request data",
                        "name": "booking",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.BookingDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.BookingDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid input or time conflict",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Booking time conflict",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/bookings/{id}": {
            "get": {
                "description": "Retrieves booking details by ID including employee and room info",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bookings"
                ],
                "summary": "Get booking by booking ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Booking ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.BookingDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Booking not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error marshalling data",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/employees": {
            "get": {
                "description": "Returns a list of all employees with their bookings and room details",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Employees"
                ],
                "summary": "Get all employees",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.EmployeeDTO"
                            }
                        }
                    }
                }
            }
        },
        "/employees/{id}": {
            "get": {
                "description": "Retrieves employee details by ID including bookings and room info, uses cache for faster response",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Employees"
                ],
                "summary": "Get employee by ID (with cache)",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Employee ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.EmployeeDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Employee not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error marshalling data",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Allows an authenticated employee to update their name, email, and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Employees"
                ],
                "summary": "Update an employee's own details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Employee ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated employee details (name, email, password)",
                        "name": "employee",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.EmployeeDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.EmployeeDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid Employee ID or JSON input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (not logged in)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden (trying to update another employee)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Employee not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to update employee",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/google/login": {
            "get": {
                "description": "Redirects logged-in employee to Google OAuth consent screen for authentication",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Initiate Google OAuth login flow",
                "responses": {
                    "307": {
                        "description": "Redirect to Google OAuth consent screen"
                    },
                    "401": {
                        "description": "User not logged in",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to create auth URL",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Authenticates employee by email and password and starts a session",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Log in an employee",
                "parameters": [
                    {
                        "description": "Login credentials (email and password)",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.EmployeeDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Email not found or incorrect password",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/logout": {
            "post": {
                "description": "Ends the employee's session by clearing session data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Log out the current employee",
                "responses": {
                    "200": {
                        "description": "Logout successful message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/oauth2callback": {
            "get": {
                "description": "Processes OAuth code and state, exchanges code for tokens, and stores them linked to the employee",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Handle Google OAuth callback",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth authorization code",
                        "name": "code",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "OAuth state parameter",
                        "name": "state",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Google Calendar authorization successful! You may close this tab.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Missing or invalid code/state parameter",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Token exchange or database save failed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Creates a new employee account with a hashed password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Register a new employee",
                "parameters": [
                    {
                        "description": "Employee registration details",
                        "name": "employee",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.EmployeeDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input or creation failed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to hash password",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/rooms": {
            "get": {
                "description": "Retrieves all rooms along with their bookings and booked employees",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Rooms"
                ],
                "summary": "Get list of all rooms",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.RoomDTO"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Adds a new meeting room to the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Rooms"
                ],
                "summary": "Create a new room",
                "parameters": [
                    {
                        "description": "Room details",
                        "name": "room",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RoomDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.RoomDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON or bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/rooms/{id}": {
            "put": {
                "description": "Update details of existing room by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Rooms"
                ],
                "summary": "Update room details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Room ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Room details to update",
                        "name": "room",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RoomDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.RoomDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON or bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Room not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.BookingDTO": {
            "type": "object",
            "properties": {
                "employee_id": {
                    "type": "integer"
                },
                "end_time": {
                    "type": "string"
                },
                "num_attendees": {
                    "type": "integer"
                },
                "room_id": {
                    "type": "integer"
                },
                "start_time": {
                    "type": "string"
                }
            }
        },
        "models.EmployeeDTO": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "models.RoomDTO": {
            "type": "object",
            "properties": {
                "capacity": {
                    "type": "integer"
                },
                "location": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        }
    }
}